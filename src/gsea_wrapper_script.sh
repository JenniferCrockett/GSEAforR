#!/bin/sh
# Script to run GSEA from the command line

set -e
set -o pipefail

usage()
{
    echo "
gsea_automated.sh : Processes input data and runs GSEA from the command line.

Usage:
-h Show this help message and exit.
-e expr_data.tsv (Required)
 	TSV file of gene symbols (rows) by patient IDs (columns) with 
	RNA-seq non-normalized counts as values. DESeq2 normalization 
	will be performed. Naming requirements: The first column of the 
	expr_data TSV file must be \"hgnc_symbol\". Values requirements:
	Values must be RNA-seq non-normalized counts.
-g groups.tsv (Required)
	TSV file of patient IDs (column 1) and group labels (column 2).
 	Naming requirements: The columns of the groups TSV file must be 
	sample_id, group.
-c control (Required)
    Control group name. GSEA comparisons will be reported as
    experimental group vs. control group.
-n out_name (Required)
	Name of GSEA run, to be used for naming output files.
-r permute mode (Required)
    Set GSEA permute mode to 'phenotype' (permutation on phenotype)
    or 'gene_set' (permutation on gene set).
-o out_dir (Required)
    Path to output directory.
-p installation path (Optional if Magic String is updated by the user during the installation process)
    Path to where the GSEAforR directory is installed.
"
}


##### Magic Strings #####

# set the conda environment path that was created when running the installation.sh script
# tip: to see the paths to your conda environments, run in terminal: conda info --env
CONDA_ENV=/Users/jcrockett/opt/anaconda3/envs/GSEAforR

# set the installation path where the GSEAforR directory is installed
#PIPELINE=/absolute/path/to/my/install/location/of/GSEAforR``

#########################

# Step 1: Processing arguments
echo "Running GSEA"

while getopts ":he:g:c:r:n:o:p:" opt; do
case $opt in
    h)
        usage
        exit 0
        ;;
    e)
        expr_data="$OPTARG"
        ;;
    g)
        groups="$OPTARG"
        ;;
    c)
        control="$OPTARG"
        ;;
    r)
        permute="$OPTARG"
        ;;
    n)
        out_name="$OPTARG"
        ;;
    o)
        out_dir="$OPTARG"
        ;;
    p)
        PIPELINE="$OPTARG"
        ;;
    \?)
        echo "invalid option"
        exit 1
esac
done
shift $((OPTIND-1)) # this allows you to parse position arguments at the end if you have any

## check validity of input files
if [ -z "$expr_data" ] || [ ! -f "$expr_data" ]
then
    usage
    echo "Please provide an existing expr_data file."
    exit 1
fi

if [ -z "$groups" ] || [ ! -f "$groups" ]
then
    usage
    echo "Please provide an existing groups file."
    exit 1
fi

## check validity of permute mode selection
if [ "$permute" != "phenotype" ] && [ "$permute" != "gene_set" ]
then
    echo "Valid options for -r (permute) are 'phenotype' or 'gene_set'"
    exit 1
fi

## echo out_dir argument for documentation
echo "Output directory: $out_dir"

## echo PIPELINE argument for documentation
echo "Pipeline located at $PIPELINE"


# Step 2: Input data processing to prepare standard GSEA inputs
echo "Preparing GSEA inputs using process_input_data.R"

### START HERE: TODO Switch to exporting an RPath & R installation script only
## activate conda environment that contains R and required packages to run the process_input_data script 
CONDA_PROFILE=$(echo $CONDA_ENV | sed -E 's/envs\/GSEAforR/etc/')/profile.d/conda.sh
source $CONDA_PROFILE
conda activate $CONDA_ENV

## run the R script
Rscript $PIPELINE/src/R/process_input_data.R --control $control $expr_data $groups $out_name $out_dir $PIPELINE


# Step 3: Run GSEA
echo "Running GSEA - run in progress"

# Get experimental group name from the cls file
group_names=$(grep "# $control" $out_dir/$out_name'_phenolabels.cls')

experimental=$(echo $group_names | cut -d ' ' -f 3)

# GSEA run command
## Generated by selecting the usual parameters in the GSEA App and using the "command" button to generate the script

{
    $PIPELINE/src/GSEA_4.3.3/gsea-cli.sh GSEA \
        -res $out_dir/$out_name'_exprset.txt' \
        -cls $out_dir/$out_name'_phenolabels.cls#'$experimental'_versus_'$control \
        -gmx $PIPELINE/resources/h.all.v2023.2.Hs.symbols.gmt \
        -collapse No_Collapse \
        -mode Max_probe \
        -norm meandiv \
        -nperm 1000 \
        -permute $permute \
        -rnd_seed timestamp \
        -rnd_type no_balance \
        -scoring_scheme weighted \
        -rpt_label $out_name'_perm_'$permute'_'$gmx_name_short \
        -metric Signal2Noise \
        -sort real \
        -order descending \
        -create_gcts false \
        -create_svgs false \
        -include_only_symbols true \
        -make_sets true \
        -median false \
        -num 100 \
        -plot_top_x 20 \
        -rnd_seed timestamp \
        -save_rnd_lists false \
        -set_max 500 \
        -set_min 10 \
        -zip_report false \
        -out $out_dir

} >$out_dir/${out_name}_perm_${permute}_h.all.v2023.2_logfile.txt 2>/dev/null # saves command line output of the GSEA tool to a log file

# Display a "completed" message to signal end of GSEA run
echo "GSEA run completed!"